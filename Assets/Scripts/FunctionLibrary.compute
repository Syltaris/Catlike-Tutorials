#pragma kernel FunctionKernel
#define PI 3.14159265358979323846

float _Step, _Time; // like smoothness
uint _Resolution;
RWStructuredBuffer<float3> _Positions; //  In HLSL a compute buffer is known as a structured buffer.

float2 GetUV (uint3 id) {
	return (id.xy + 0.5) * _Step - 1.0; // xy is from the (8,8,1) ?
}

void SetPosition (uint3 id, float3 position) {
	if (id.x < _Resolution && id.y < _Resolution) { // array index boundary
		_Positions[id.x + id.y * _Resolution] = position;
	}
}

float3 Wave (float u, float v, float t) {
	float3 p;
	p.x = u;
	p.y = sin(PI * (u + v + t));
	p.z = v;
	return p;
}

[numthreads(8, 8, 1)] // each group run single thread? (1,1,1)
void FunctionKernel (uint3 id: SV_DispatchThreadID) { // must explicitly specify arg type
    float2 uv = GetUV(id);
	SetPosition(id, Wave(uv.x, uv.y, _Time));
}